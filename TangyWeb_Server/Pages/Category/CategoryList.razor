@page "/category"
@using Tangy_Business.Repository.IRepository
@using Tangy_Models
@inject ICategoryRepository _categoryReposiory; 
@inject IJSRuntime _jsRuntime;

<div class="row mt-4">
<div class="col-6">
        <h4 class="card-title text-primary">Category List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="category/create" class="btn btn-primary form-control">Add New Category </a>
    </div>

</div>
<div class="col-12 p-3">
    @if(Categories.Any())
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <td>Name</td>
                    <td>Action</td>
                </tr>
            </thead>
            <tbody>
                @foreach(var category in Categories)
                {
                    <tr>
                        <td>@category.Name</td>
                        <td>
                            <NavLink href=@($"category/edit/{category.Id}") class="btn btn-primary">Edit</NavLink>
                            <button class="btn btn-danger" @onclick="()=>ConfirmDelete(category.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="images/loading.gif" />
            </div>
        }
        else
        {
            <p>No Records Found..</p>
        }
    }
</div>

<_DeleteConfirmationComponent  ConfirmationChanged="ProcessDelete" DeleteInProgress="IsDeleteProcessing"  ></_DeleteConfirmationComponent>

@code {
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private bool IsLoading { get; set; } 
    private int DeleteCategoryId { get; set; }
    public bool IsDeleteProcessing { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await  LoadCategories() ;
        }

    }



    private async Task LoadCategories()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await  _categoryReposiory.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private void ConfirmDelete(int id)
    {
        DeleteCategoryId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ProcessDelete(bool IsConfirm)
    {
        if(IsConfirm && DeleteCategoryId !=0)
        {
            IsDeleteProcessing = true;
            await _categoryReposiory.Delete(DeleteCategoryId);
            await  LoadCategories();
             _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
             IsDeleteProcessing = false;
             StateHasChanged();
        }
    }

}
